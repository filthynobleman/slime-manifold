#version 440 core


struct Agent
{
    vec2    Pos;
    float   Angle;
    int     TriID;
};

struct Triangle
{
    int V[3];
};

struct Vertex
{
    float Vals[8];
};

struct SimulationParameters
{
    int         NVerts;
    int         NEdges;
    int         NTris;

    int         NumAgents;
    int         AgentGridSize;

    float       MoveSpeed;
    float       TurnSpeed;

    float       VisionAngle;
    float       VisionDist;
    int         SensorRadius;

    float       Time;
    float       DeltaTime;

    float       DecayRate;
    float       DiffuseRate;
    float       TrailWeight;
};


layout(local_size_x = 1, local_size_y = 1) in;
layout(std430, binding = 2) readonly buffer SimParameters
{
    SimulationParameters Params;
};
layout(std430, binding = 3) buffer AgentsArray
{
    Agent Agents[];
};
layout(std430, binding = 4) readonly buffer Vertices
{
    Vertex Verts[];
};
layout(std430, binding = 5) readonly buffer Triangles
{
    Triangle Tris[];
};


uint hash(uint state)
{
    state ^= 2747636419;
    state *= 2654435769;
    state ^= state >> 16;
    state *= 2654435769;
    state ^= state >> 16;
    state *= 2654435769;
    return state;
}

float scaleToRange01(uint state)
{
    return float(state) / 4294967295.0f;
}

uint GetAgentID(uvec3 GID, uvec3 NWG)
{
    return GID.z * NWG.y * NWG.x + GID.y * NWG.x + GID.x;
}


void main()
{
    uint AgentID = GetAgentID(gl_GlobalInvocationID, gl_NumWorkGroups);
    if (AgentID >= Params.NumAgents)
        return;

    // Pick a random triangle
    uint State = hash(AgentID);
    State = hash(State);
    State = hash(State);
    int TriID = int(State % Params.NTris);
    // TriID = 0;
    // Pick a random position in triangle
    vec2 V1 = vec2(Verts[Tris[TriID].V[0]].Vals[6], Verts[Tris[TriID].V[0]].Vals[7]);
    vec2 V2 = vec2(Verts[Tris[TriID].V[1]].Vals[6], Verts[Tris[TriID].V[1]].Vals[7]);
    vec2 V3 = vec2(Verts[Tris[TriID].V[2]].Vals[6], Verts[Tris[TriID].V[2]].Vals[7]);
    State = hash(State);
    float A1 = scaleToRange01(State);
    State = hash(State);
    float A2 = scaleToRange01(State);
    State = hash(State);
    float A3 = scaleToRange01(State);
    float Sum = A1 + A2 + A3;
    A1 /= Sum;
    A2 /= Sum;
    A3 /= Sum;
    Agents[AgentID].Pos = A1 * V1 + A2 * V2 + A3 * V3;
    // Agents[AgentID].Pos = vec2(A1, A2);
    Agents[AgentID].TriID = TriID;
    // Random direction
    State = hash(State);
    Agents[AgentID].Angle = scaleToRange01(State) * 360.0f;
}