#version 440 core


struct Agent
{
    vec2    Pos;
    float   Angle;
    int     TriID;
};

struct Triangle
{
    int V[3];
};

struct Vertex
{
    float Vals[8];
};

struct Tri2Tri
{
    int Tris[];
};

struct SimulationParameters
{
    int         NVerts;
    int         NEdges;
    int         NTris;

    int         NumAgents;
    int         AgentGridSize;

    float       MoveSpeed;
    float       TurnSpeed;

    float       VisionAngle;
    float       VisionDist;
    int         SensorRadius;

    float       Time;
    float       DeltaTime;

    float       DecayRate;
    float       DiffuseRate;
    float       TrailWeight;
};


layout(local_size_x = 1, local_size_y = 1) in;
layout(rg32f, binding = 0) uniform image2D TrailMap;
layout(std430, binding = 1) readonly buffer SimParameters
{
    SimulationParameters Params;
};
layout(std430, binding = 2) buffer AgentsArray
{
    Agent Agents[];
};
layout(std430, binding = 3) readonly buffer Vertices
{
    Vertex Verts[];
};
layout(std430, binding = 4) readonly buffer Triangles
{
    Triangle Tris[];
};
layout(std430, binding = 5) readonly buffer Tri2TriMap
{
    Tri2Tri T2T[];
};


uint hash(uint state)
{
    state ^= 2747636419;
    state *= 2654435769;
    state ^= state >> 16;
    state *= 2654435769;
    state ^= state >> 16;
    state *= 2654435769;
    return state;
}

float scaleToRange01(uint state)
{
    return float(state) / 4294967295.0f;
}

uint GetAgentID(uvec3 GID, uvec3 NWG)
{
    return GID.z * NWG.y * NWG.x + GID.y * NWG.x + GID.x;
}


void main()
{
    uint AgentID = GetAgentID(gl_GlobalInvocationID, gl_NumWorkGroups);
    if (AgentID >= Params.NumAgents)
        return;

    Agent A = Agents[AgentID];
    ivec2 Size = imageSize(TrailMap);
    ivec2 Coords = ivec2(int(A.Pos.x * (Size.x - 1)), int(A.Pos.y * (Size.y - 1)));
    vec4 Pixel = (1.0f, 1.0f, 0.0f, 0.0f);
    imageStore(TrailMap, Coords, Pixel);
}
